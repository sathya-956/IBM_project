# -*- coding: utf-8 -*-
"""Health Ai.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uyXnZcCOU6H-UAzIjYcy0BXL4njEQEoo
"""

!pip install transformers torch gradio PyPDF2 -q

import gradio as gr
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM
import PyPDF2
import os

# -----------------------------
# Load Model and Tokenizer
# -----------------------------
model_name = "gpt2"  # you can replace with a better model, e.g., "EleutherAI/gpt-neo-1.3B"

tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForCausalLM.from_pretrained(model_name)

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model = model.to(device)


# -----------------------------
# Text Generation Helper
# -----------------------------
def generate_response(prompt, max_length=300):
    inputs = tokenizer(prompt, return_tensors="pt", truncation=True, max_length=512).to(device)

    with torch.no_grad():
        outputs = model.generate(
            **inputs,
            max_length=max_length,
            temperature=0.7,
            top_p=0.9,
            do_sample=True,
            pad_token_id=tokenizer.eos_token_id
        )

    response = tokenizer.decode(outputs[0], skip_special_tokens=True)
    return response.replace(prompt, "").strip()


# -----------------------------
# PDF Text Extraction
# -----------------------------
def extract_text_from_pdf(pdf_file):
    if pdf_file is None:
        return ""

    text = ""
    try:
        reader = PyPDF2.PdfReader(pdf_file)
        for page in reader.pages:
            text += page.extract_text() + "\n"
    except Exception as e:
        return f"Error reading PDF: {str(e)}"

    return text


# -----------------------------
# Eco Tips Generator
# -----------------------------
def eco_tips_generator(problem_keywords):
    prompt = f"Generate practical and actionable eco-friendly tips for sustainable living related to: {problem_keywords}. Provide specific solutions and suggestions."
    return generate_response(prompt, max_length=200)


# -----------------------------
# Policy Summarization
# -----------------------------
def policy_summarization(pdf_file, policy_text):
    content = ""

    if pdf_file is not None:
        content = extract_text_from_pdf(pdf_file)

    if not content and not policy_text:
        return "No policy content provided."

    summary_prompt = f"Summarize the following policy document and extract the most important points, key provisions, and implications:\n{content if content else policy_text}"
    return generate_response(summary_prompt, max_length=400)


# -----------------------------
# Gradio Interface
# -----------------------------
with gr.Blocks() as app:
    gr.Markdown("# üåç Eco Assistant & Policy Analyzer")

    with gr.Tab("‚ôªÔ∏è Eco Tips Generator"):
        with gr.Row():
            with gr.Column():
                keywords_input = gr.Textbox(
                    label="Environmental Problem/Keywords",
                    placeholder="E.g., plastic, solar, water waste, energy saving...",
                    lines=3
                )
                generate_tips_btn = gr.Button("Generate Eco Tips")

            with gr.Column():
                tips_output = gr.Textbox(label="Sustainable Living Tips", lines=8)

            generate_tips_btn.click(
                eco_tips_generator,
                inputs=keywords_input,
                outputs=tips_output
            )

    with gr.Tab("üìë Policy Summarization"):
        with gr.Row():
            with gr.Column():
                pdf_upload = gr.File(label="Upload Policy PDF", file_types=[".pdf"])
                policy_text_input = gr.Textbox(
                    label="Or paste policy text here",
                    placeholder="Paste policy document text...",
                    lines=8
                )
                summarize_btn = gr.Button("Summarize Policy")

            with gr.Column():
                summary_output = gr.Textbox(label="Policy Summary & Key Points", lines=20)

            summarize_btn.click(
                policy_summarization,
                inputs=[pdf_upload, policy_text_input],
                outputs=summary_output
            )

    # -----------------------------
    # Launch App
    # -----------------------------
    app.launch(share=True)